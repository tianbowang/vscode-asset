/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "assert", "vs/base/test/common/utils", "vs/editor/common/core/range", "vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper", "vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos", "vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length", "vs/editor/test/common/testTextModel"], function (require, exports, assert, utils_1, range_1, beforeEditPositionMapper_1, combineTextEditInfos_1, length_1, testTextModel_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('combineTextEditInfos', () => {
        (0, utils_1.ensureNoDisposablesAreLeakedInTestSuite)();
        for (let seed = 0; seed < 50; seed++) {
            test('test' + seed, () => {
                runTest(seed);
            });
        }
    });
    function runTest(seed) {
        const rng = new MersenneTwister(seed);
        const str = 'abcde\nfghij\nklmno\npqrst\n';
        const textModelS0 = (0, testTextModel_1.createTextModel)(str);
        const edits1 = getRandomEditInfos(textModelS0, rng.nextIntRange(1, 4), rng);
        const textModelS1 = (0, testTextModel_1.createTextModel)(textModelS0.getValue());
        textModelS1.applyEdits(edits1.map(e => toEdit(e)));
        const edits2 = getRandomEditInfos(textModelS1, rng.nextIntRange(1, 4), rng);
        const textModelS2 = (0, testTextModel_1.createTextModel)(textModelS1.getValue());
        textModelS2.applyEdits(edits2.map(e => toEdit(e)));
        const combinedEdits = (0, combineTextEditInfos_1.combineTextEditInfos)(edits1, edits2);
        for (const edit of combinedEdits) {
            const range = range_1.Range.fromPositions((0, length_1.lengthToPosition)(edit.startOffset), (0, length_1.lengthToPosition)((0, length_1.lengthAdd)(edit.startOffset, edit.newLength)));
            const value = textModelS2.getValueInRange(range);
            if (!value.match(/^(L|C|\n)*$/)) {
                throw new Error('Invalid edit: ' + value);
            }
            textModelS2.applyEdits([{
                    range,
                    text: textModelS0.getValueInRange(range_1.Range.fromPositions((0, length_1.lengthToPosition)(edit.startOffset), (0, length_1.lengthToPosition)(edit.endOffset))),
                }]);
        }
        assert.deepStrictEqual(textModelS2.getValue(), textModelS0.getValue());
        textModelS0.dispose();
        textModelS1.dispose();
        textModelS2.dispose();
    }
    function getRandomEditInfos(textModel, count, rng) {
        const edits = [];
        let i = 0;
        for (let j = 0; j < count; j++) {
            edits.push(getRandomEdit(textModel, i, rng));
            i = textModel.getOffsetAt((0, length_1.lengthToPosition)(edits[j].endOffset));
        }
        return edits;
    }
    function getRandomEdit(textModel, rangeOffsetStart, rng) {
        const textModelLength = textModel.getValueLength();
        const offsetStart = rng.nextIntRange(rangeOffsetStart, textModelLength);
        const offsetEnd = rng.nextIntRange(offsetStart, textModelLength);
        const lineCount = rng.nextIntRange(0, 3);
        const columnCount = rng.nextIntRange(0, 5);
        return new beforeEditPositionMapper_1.TextEditInfo((0, length_1.positionToLength)(textModel.getPositionAt(offsetStart)), (0, length_1.positionToLength)(textModel.getPositionAt(offsetEnd)), (0, length_1.toLength)(lineCount, columnCount));
    }
    function toEdit(editInfo) {
        const l = (0, length_1.lengthToObj)(editInfo.newLength);
        let text = '';
        for (let i = 0; i < l.lineCount; i++) {
            text += 'LLL\n';
        }
        for (let i = 0; i < l.columnCount; i++) {
            text += 'C';
        }
        return {
            range: range_1.Range.fromPositions((0, length_1.lengthToPosition)(editInfo.startOffset), (0, length_1.lengthToPosition)(editInfo.endOffset)),
            text
        };
    }
    // Generated by copilot
    class MersenneTwister {
        constructor(seed) {
            this.mt = new Array(624);
            this.index = 0;
            this.mt[0] = seed >>> 0;
            for (let i = 1; i < 624; i++) {
                const s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
                this.mt[i] = (((((s & 0xffff0000) >>> 16) * 0x6c078965) << 16) + (s & 0x0000ffff) * 0x6c078965 + i) >>> 0;
            }
        }
        nextInt() {
            if (this.index === 0) {
                this.generateNumbers();
            }
            let y = this.mt[this.index];
            y = y ^ (y >>> 11);
            y = y ^ ((y << 7) & 0x9d2c5680);
            y = y ^ ((y << 15) & 0xefc60000);
            y = y ^ (y >>> 18);
            this.index = (this.index + 1) % 624;
            return y >>> 0;
        }
        nextIntRange(start, endExclusive) {
            const range = endExclusive - start;
            return Math.floor(this.nextInt() / (0x100000000 / range)) + start;
        }
        generateNumbers() {
            for (let i = 0; i < 624; i++) {
                const y = (this.mt[i] & 0x80000000) + (this.mt[(i + 1) % 624] & 0x7fffffff);
                this.mt[i] = this.mt[(i + 397) % 624] ^ (y >>> 1);
                if ((y % 2) !== 0) {
                    this.mt[i] = this.mt[i] ^ 0x9908b0df;
                }
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZVRleHRFZGl0SW5mb3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi8vL1VzZXJzL3RpYW5ib3cvRGVza3RvcC92c2NvZGUvc3JjLyIsInNvdXJjZXMiOlsidnMvZWRpdG9yL3Rlc3QvY29tbW9uL21vZGVsL2JyYWNrZXRQYWlyQ29sb3JpemVyL2NvbWJpbmVUZXh0RWRpdEluZm9zLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztnR0FHZ0c7Ozs7SUFZaEcsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtRQUVsQyxJQUFBLCtDQUF1QyxHQUFFLENBQUM7UUFFMUMsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLE9BQU8sQ0FBQyxJQUFZO1FBQzVCLE1BQU0sR0FBRyxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRDLE1BQU0sR0FBRyxHQUFHLDhCQUE4QixDQUFDO1FBQzNDLE1BQU0sV0FBVyxHQUFHLElBQUEsK0JBQWUsRUFBQyxHQUFHLENBQUMsQ0FBQztRQUV6QyxNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUUsTUFBTSxXQUFXLEdBQUcsSUFBQSwrQkFBZSxFQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzVELFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFB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